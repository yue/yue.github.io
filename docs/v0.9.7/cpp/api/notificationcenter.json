{
  "name": "NotificationCenter",
  "component": "gui",
  "header": "nativeui/notification_center.h",
  "type": "class",
  "singleton": true,
  "namespace": "nu",
  "description": "Handle events of notifications.",
  "detail": "The `NotificationCenter` API is responsible for handling events of\nnotifications, for sending notifications, the `<!type>Notification` API should\nbe used.\n\nFor most platforms, the notifications will persist after the app is quit, so\nthe source notification of the received event may be sent by other instances\nof the app. For this reason, you do not get the source `Notification` instance\nwhen handling events, and you should not do bookkeeping to try to do so.\n\nTo pass information in notifications, you should use\n`<!method>Notification::SetInfo(info)` to store a custom string, which will\nbe passed to the event handlers of `NotificationCenter`.\n\n```cpp\nauto* notification_center = nu::NotificationCenter::GetCurrent();\nnotification_center->on_notification_click.Connect([=](const std::string& info) {\n  LOG(ERROR) << \"Clicked: \" << info;\n});\n```\n\n```lua\nfunction app.notificationcenter.onnotificationclick(info)\n  print(info)\nend\n```\n\n```js\ngui.notificationCenter.onNotificationClick = (info) => {\n  console.log('Clicked', info)\n}\n```\n\n## Linux notices\n\nOn Windows and macOS, clicking a notification will start the app that sent\nthe notification, but this feature has not been implemented on Linux yet.\n\nOn Linux due to the limitation of\n[Desktop Notifications Specification](https://developer.gnome.org/notification-spec/),\nthe custom information attached to the notification is not persisted after\nthe app is quit, so if a notification is sent by other instances of the app,\nthe `info` parameter will be empty in its events.\n\n## Windows notices\n\nOn Windows receiving notification events is implemented by starting a COM\nserver, which is started automatcially when any event is subscribed.\n\nThe COM server must has a `ToastActivatorCLSID`, which will be automatcially\ngenerated from the app's `AppUserModelID` if non is specified. It is\nrecommended to use `uuidgen.exe` to generate one and set it explicitly\nwith `<!method>NotificationCenter::SetCOMServerOptions(options)`.\n\nFor the COM server to receive events from Action Center, there must be a start\nmenu shortcut, with `AppUserModelID` and `ToastActivatorCLSID` properties\nassigned to it. The `<!method>App::CreateStartMenuShortcut(options)` API can be\nused to create one for testing.\n\nIt is also possible to start the app by clicking the notification, after the\napp has quit, but it requires registering the COM server in registry, which\nis done automatcially when any event is subscribed. This behavior can be\nturned off with `<!method>NotificationCenter::SetCOMServerOptions(options)`,\nand the item in registry can be removed with\n`<!method>NotificationCenter::RemoveCOMServerFromRegistry()`.\n",
  "class_methods": [
    {
      "signature": {
        "returnType": {
          "name": "NotificationCenter*",
          "id": "notificationcenter"
        },
        "name": "GetCurrent",
        "parameters": [],
        "shortStr": "GetCurrent()",
        "str": "NotificationCenter* GetCurrent()"
      },
      "description": "Return current NotificationCenter instance.",
      "id": "getcurrent"
    }
  ],
  "methods": [
    {
      "signature": {
        "name": "Clear",
        "parameters": [],
        "shortStr": "Clear()",
        "str": "void Clear()"
      },
      "description": "Remove all notifications sent by this app.",
      "detail": "Due to the limitations of system APIs, on Linux only notifications created\nby current process can be cleared, and on Windows clearing notifications\nwon't emit the `<!name>on_notification_close` event.\n",
      "id": "clear"
    },
    {
      "signature": {
        "returnType": {
          "name": "bool"
        },
        "name": "SetCOMServerOptions",
        "parameters": [
          {
            "type": {
              "name": "NotificationCenter::COMServerOptions",
              "id": "notificationcenter_comserveroptions"
            },
            "name": "options"
          }
        ],
        "shortStr": "SetCOMServerOptions(options)",
        "str": "bool SetCOMServerOptions(NotificationCenter::COMServerOptions options)"
      },
      "platform": [
        "Windows"
      ],
      "description": "Set COM server related options, `false` will be returned if the passed\n`ToastActivatorCLSID` is invalid.\n",
      "detail": "This API should be only called before subscribing to any event.",
      "id": "setcomserveroptions-options"
    },
    {
      "signature": {
        "returnType": {
          "name": "bool"
        },
        "name": "RegisterCOMServer",
        "parameters": [],
        "shortStr": "RegisterCOMServer()",
        "str": "bool RegisterCOMServer()"
      },
      "platform": [
        "Windows"
      ],
      "description": "Register the COM server.",
      "detail": "Usually the COM server is automatcially registered when any event is\nsubscribed, but this API can be used to register COM server manully if\n`<!name>write_registry` is set to `false` in `<!name>SetCOMServerOptions`.\n",
      "id": "registercomserver"
    },
    {
      "signature": {
        "name": "RemoveCOMServerFromRegistry",
        "parameters": [],
        "shortStr": "RemoveCOMServerFromRegistry()",
        "str": "void RemoveCOMServerFromRegistry()"
      },
      "platform": [
        "Windows"
      ],
      "description": "Remove the app's COM server from registry.",
      "id": "removecomserverfromregistry"
    },
    {
      "signature": {
        "returnType": {
          "name": "const std::wstring&"
        },
        "name": "GetToastActivatorCLSID",
        "parameters": [],
        "shortStr": "GetToastActivatorCLSID()",
        "str": "const std::wstring& GetToastActivatorCLSID()"
      },
      "platform": [
        "Windows"
      ],
      "description": "Return current `ToastActivatorCLSID`.",
      "id": "gettoastactivatorclsid"
    }
  ],
  "events": [
    {
      "signature": {
        "name": "on_notification_show",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "info"
          }
        ],
        "shortStr": "on_notification_show(info)",
        "str": "void on_notification_show(const std::string& info)"
      },
      "description": "Emitted when a notification has been displayed, the custom `info` of the\nnotification is passed.\n",
      "id": "onnotificationshow-info"
    },
    {
      "signature": {
        "name": "on_notification_close",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "info"
          }
        ],
        "shortStr": "on_notification_close(info)",
        "str": "void on_notification_close(const std::string& info)"
      },
      "description": "Emitted when a notification has been closed without activation, the custom\n`info` of the notification is passed.\n",
      "detail": "Note that this event is not guarenteed to emit for notifications, the\nsystem may choose to not notify the app when a notification is closed.\nSo you should not do bookkeeping of notifications and count on this API\nto clear closed notifications.\n",
      "id": "onnotificationclose-info"
    },
    {
      "signature": {
        "name": "on_notification_click",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "info"
          }
        ],
        "shortStr": "on_notification_click(info)",
        "str": "void on_notification_click(const std::string& info)"
      },
      "description": "Emitted when user clicks on the body of a notification, the custom\n`info` of the notification is passed.\n",
      "detail": "On Linux due to the limitation of\n[Desktop Notifications Specification](https://developer.gnome.org/notification-spec/),\nonly the custom `info` of notifications sent by current app will be\npassed, i.e. if the app received a notification sent by other instances\nof the app, the `info` will be empty.\n",
      "id": "onnotificationclick-info"
    },
    {
      "signature": {
        "name": "on_notification_action",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "action_info"
          }
        ],
        "shortStr": "on_notification_action(action_info)",
        "str": "void on_notification_action(const std::string& action_info)"
      },
      "description": "Emitted when user clicks on an action button of a notification, the custom\n`<!name>action_info` string of the action button is passed.\n",
      "id": "onnotificationaction-actioninfo"
    },
    {
      "signature": {
        "name": "on_notification_reply",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "info"
          },
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "reply"
          }
        ],
        "shortStr": "on_notification_reply(info, reply)",
        "str": "void on_notification_reply(const std::string& info, const std::string& reply)"
      },
      "platform": [
        "macOS",
        "Windows"
      ],
      "description": "Emitted when user sends a text using inline reply in a notification, the\ncustom `info` of the notification, and the `reply` string will be passed.\n",
      "detail": "On Linux due to the limitation of\n[Desktop Notifications Specification](https://developer.gnome.org/notification-spec/),\nonly the custom `info` of notifications sent by current app will be\npassed, i.e. if the app received a notification sent by other instances\nof the app, the `info` will be empty.\n",
      "id": "onnotificationreply-info-reply"
    },
    {
      "signature": {
        "returnType": {
          "name": "bool"
        },
        "name": "on_toast_activate",
        "parameters": [
          {
            "type": {
              "name": "const std::wstring&"
            },
            "name": "app_user_model_id"
          },
          {
            "type": {
              "name": "const std::wstring&"
            },
            "name": "invoked_args"
          },
          {
            "type": {
              "name": "const std::vector<NotificationCenter::InputData>&"
            },
            "name": "data",
            "description": "An array of `<!type>NotificationCenter::InputData`."
          }
        ],
        "shortStr": "on_toast_activate(app_user_model_id, invoked_args, data)",
        "str": "bool on_toast_activate(const std::wstring& app_user_model_id, const std::wstring& invoked_args, const std::vector<NotificationCenter::InputData>& data)"
      },
      "platform": [
        "Windows"
      ],
      "description": "Emitted when the notification activator COM server receives the Activate\nmessage.\n",
      "detail": "This event is useful if you are using custom XML in the notification and\nwant to handle the events yourself.\n\nReturning `true` will prevent normal notifications event from emitting.\n",
      "id": "ontoastactivate-appusermodelid-invokedargs-data"
    }
  ],
  "id": "notificationcenter"
}