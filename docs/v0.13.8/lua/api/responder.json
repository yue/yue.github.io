{
  "name": "Responder",
  "component": "gui",
  "header": "nativeui/responder.h",
  "type": "Class",
  "namespace": "nu",
  "description": "Base class of Window and View for event processing.",
  "methods": [
    {
      "signature": {
        "name": "setcapture",
        "parameters": [],
        "shortStr": "setcapture()",
        "str": "setcapture()"
      },
      "description": "Set mouse capture to the responder.",
      "id": "setcapture"
    },
    {
      "signature": {
        "name": "releasecapture",
        "parameters": [],
        "shortStr": "releasecapture()",
        "str": "releasecapture()"
      },
      "description": "Release mouse capture if the responder has mouse capture.",
      "id": "releasecapture"
    },
    {
      "signature": {
        "returnType": {
          "name": "boolean"
        },
        "name": "hascapture",
        "parameters": [],
        "shortStr": "hascapture()",
        "str": "hascapture()"
      },
      "description": "Return whether the responder has mouse capture.",
      "id": "hascapture"
    },
    {
      "signature": {
        "returnType": {
          "name": "userdata"
        },
        "name": "getnative",
        "parameters": [],
        "shortStr": "getnative()",
        "str": "getnative()"
      },
      "platform": [
        "Linux",
        "macOS"
      ],
      "description": "Return a light userdata containing the pointer of underlying native\nwidget wrapped by the responder.\n",
      "detail": "On Linux the C++ type of the pointer is `GtkWidget*`, and on macOS it is\n`NSResponder*`. The actual subclass type depends on which type this\nresponder is, for example for `Window` you can expect the native type to\nbe `GtkWindow*` on Linux and `NSWindow*` on macOS, and for `View` it would\nbe `GtkWidget*` on Linux and `NSView*` on macOS.\n\nHowever for subclasses of `View`, the native type is not specified, you\nmay find out the information by looking into the source code, but the type\nmight be changed in future updates. For example, the native type of\n`TextEdit` is currently a `GtkScrolledWindow*` with a `GtkTextView*` in\nit, but we may want to replace it with a custom widget when adding more\nfeatures in future.\n",
      "id": "getnative"
    }
  ],
  "events": [
    {
      "signature": {
        "returnType": {
          "name": "boolean"
        },
        "name": "onmousedown",
        "parameters": [
          {
            "type": {
              "name": "Responder",
              "id": "responder"
            },
            "name": "self"
          },
          {
            "type": {
              "name": "MouseEvent",
              "id": "mouseevent"
            },
            "name": "event"
          }
        ],
        "shortStr": "onmousedown(self, event)",
        "str": "onmousedown(self, event)"
      },
      "description": "Emitted when pressing mouse buttons.",
      "id": "onmousedown-self-event"
    },
    {
      "signature": {
        "returnType": {
          "name": "boolean"
        },
        "name": "onmouseup",
        "parameters": [
          {
            "type": {
              "name": "Responder",
              "id": "responder"
            },
            "name": "self"
          },
          {
            "type": {
              "name": "MouseEvent",
              "id": "mouseevent"
            },
            "name": "event"
          }
        ],
        "shortStr": "onmouseup(self, event)",
        "str": "onmouseup(self, event)"
      },
      "description": "Emitted when releasing mouse buttons.",
      "id": "onmouseup-self-event"
    },
    {
      "signature": {
        "name": "onmousemove",
        "parameters": [
          {
            "type": {
              "name": "Responder",
              "id": "responder"
            },
            "name": "self"
          },
          {
            "type": {
              "name": "MouseEvent",
              "id": "mouseevent"
            },
            "name": "event"
          }
        ],
        "shortStr": "onmousemove(self, event)",
        "str": "onmousemove(self, event)"
      },
      "description": "Emitted when user moves mouse in the responder.",
      "id": "onmousemove-self-event"
    },
    {
      "signature": {
        "name": "onmouseenter",
        "parameters": [
          {
            "type": {
              "name": "Responder",
              "id": "responder"
            },
            "name": "self"
          },
          {
            "type": {
              "name": "MouseEvent",
              "id": "mouseevent"
            },
            "name": "event"
          }
        ],
        "shortStr": "onmouseenter(self, event)",
        "str": "onmouseenter(self, event)"
      },
      "description": "Emitted when mouse enters the responder.",
      "id": "onmouseenter-self-event"
    },
    {
      "signature": {
        "name": "onmouseleave",
        "parameters": [
          {
            "type": {
              "name": "Responder",
              "id": "responder"
            },
            "name": "self"
          },
          {
            "type": {
              "name": "MouseEvent",
              "id": "mouseevent"
            },
            "name": "event"
          }
        ],
        "shortStr": "onmouseleave(self, event)",
        "str": "onmouseleave(self, event)"
      },
      "description": "Emitted when mouse leaves the responder.",
      "id": "onmouseleave-self-event"
    },
    {
      "signature": {
        "returnType": {
          "name": "boolean"
        },
        "name": "onkeydown",
        "parameters": [
          {
            "type": {
              "name": "Responder",
              "id": "responder"
            },
            "name": "self"
          },
          {
            "type": {
              "name": "KeyEvent",
              "id": "keyevent"
            },
            "name": "event"
          }
        ],
        "shortStr": "onkeydown(self, event)",
        "str": "onkeydown(self, event)"
      },
      "description": "Emitted when pressing keyboard.",
      "id": "onkeydown-self-event"
    },
    {
      "signature": {
        "returnType": {
          "name": "boolean"
        },
        "name": "onkeyup",
        "parameters": [
          {
            "type": {
              "name": "Responder",
              "id": "responder"
            },
            "name": "self"
          },
          {
            "type": {
              "name": "KeyEvent",
              "id": "keyevent"
            },
            "name": "event"
          }
        ],
        "shortStr": "onkeyup(self, event)",
        "str": "onkeyup(self, event)"
      },
      "description": "Emitted when releasing keyboard.",
      "id": "onkeyup-self-event"
    },
    {
      "signature": {
        "name": "oncapturelost",
        "parameters": [
          {
            "type": {
              "name": "Responder",
              "id": "responder"
            },
            "name": "self"
          }
        ],
        "shortStr": "oncapturelost(self)",
        "str": "oncapturelost(self)"
      },
      "description": "Emitted when the mouse capture on responder has been released.",
      "id": "oncapturelost-self"
    }
  ],
  "module": "yue.gui",
  "id": "responder"
}