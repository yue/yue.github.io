{
  "name": "TextEdit",
  "component": "gui",
  "header": "nativeui/text_edit.h",
  "type": "Class",
  "namespace": "nu",
  "inherit": {
    "name": "View",
    "id": "view"
  },
  "description": "Plain text input view.",
  "class_methods": [
    {
      "signature": {
        "returnType": {
          "name": "TextEdit",
          "id": "textedit"
        },
        "name": "create",
        "parameters": [],
        "str": "create()"
      },
      "description": "Create a new `TextEdit`.",
      "id": "create"
    }
  ],
  "methods": [
    {
      "signature": {
        "name": "setText",
        "parameters": [
          {
            "type": {
              "name": "String"
            },
            "name": "text"
          }
        ],
        "str": "setText(text)"
      },
      "description": "Change the text in the view.",
      "id": "settext-text"
    },
    {
      "signature": {
        "returnType": {
          "name": "String"
        },
        "name": "getText",
        "parameters": [],
        "str": "getText()"
      },
      "description": "Return currently displayed text.",
      "id": "gettext"
    },
    {
      "signature": {
        "name": "undo",
        "parameters": [],
        "str": "undo()"
      },
      "description": "Undo the last edit operation in the undo queue.",
      "id": "undo"
    },
    {
      "signature": {
        "name": "canUndo",
        "parameters": [],
        "str": "canUndo()"
      },
      "description": "Return whether there are any actions in undo queue.",
      "id": "canundo"
    },
    {
      "signature": {
        "name": "redo",
        "parameters": [],
        "str": "redo()"
      },
      "description": "Redo the next action in the redo queue",
      "id": "redo"
    },
    {
      "signature": {
        "name": "canRedo",
        "parameters": [],
        "str": "canRedo()"
      },
      "description": "Return whether there are any actions in redo queue.",
      "id": "canredo"
    },
    {
      "signature": {
        "name": "cut",
        "parameters": [],
        "str": "cut()"
      },
      "description": "Delete (cut) the current selection, if any, copy the deleted text to the\nclipboard.\n",
      "id": "cut"
    },
    {
      "signature": {
        "name": "copy",
        "parameters": [],
        "str": "copy()"
      },
      "description": "Copy current selection to clipboard.",
      "id": "copy"
    },
    {
      "signature": {
        "name": "paste",
        "parameters": [],
        "str": "paste()"
      },
      "description": "Copy the current content of the clipboard to current caret position.\n",
      "id": "paste"
    },
    {
      "signature": {
        "name": "selectAll",
        "parameters": [],
        "str": "selectAll()"
      },
      "description": "Select all text.",
      "id": "selectall"
    },
    {
      "signature": {
        "returnType": {
          "name": "std::tuple",
          "template": "std::tuple",
          "args": [
            {
              "name": "Integer"
            },
            {
              "name": "Integer"
            }
          ],
          "id": "std_tuple"
        },
        "name": "getSelectionRange",
        "parameters": [],
        "str": "getSelectionRange()"
      },
      "description": "Return the start position and end position of current selection.\n\nIf nothing is selected, the cursor position will be returned as both values, ie. (0, 0).\n",
      "id": "getselectionrange"
    },
    {
      "signature": {
        "name": "selectRange",
        "parameters": [
          {
            "type": {
              "name": "Integer"
            },
            "name": "start"
          },
          {
            "type": {
              "name": "Integer"
            },
            "name": "end"
          }
        ],
        "str": "selectRange(start, end)"
      },
      "description": "Select text between `start` and `end` positions.",
      "id": "selectrange-start-end"
    },
    {
      "signature": {
        "returnType": {
          "name": "String"
        },
        "name": "getTextInRange",
        "parameters": [
          {
            "type": {
              "name": "Integer"
            },
            "name": "start"
          },
          {
            "type": {
              "name": "Integer"
            },
            "name": "end"
          }
        ],
        "str": "getTextInRange(start, end)"
      },
      "description": "Return the text between `start` and `end` positions.",
      "id": "gettextinrange-start-end"
    },
    {
      "signature": {
        "name": "insertText",
        "parameters": [
          {
            "type": {
              "name": "String"
            },
            "name": "text"
          }
        ],
        "str": "insertText(text)"
      },
      "description": "Insert `text` at current caret position.",
      "id": "inserttext-text"
    },
    {
      "signature": {
        "name": "insertTextAt",
        "parameters": [
          {
            "type": {
              "name": "String"
            },
            "name": "text"
          },
          {
            "type": {
              "name": "Integer"
            },
            "name": "position"
          }
        ],
        "str": "insertTextAt(text, position)"
      },
      "description": "Insert `text` at the `position`.",
      "id": "inserttextat-text-position"
    },
    {
      "signature": {
        "name": "delete",
        "parameters": [],
        "str": "delete()"
      },
      "description": "Delete text of current selection.",
      "id": "delete"
    },
    {
      "signature": {
        "name": "deleteRange",
        "parameters": [
          {
            "type": {
              "name": "Integer"
            },
            "name": "start"
          },
          {
            "type": {
              "name": "Integer"
            },
            "name": "end"
          }
        ],
        "str": "deleteRange(start, end)"
      },
      "description": "Delete text between `start` and `end` positions.",
      "id": "deleterange-start-end"
    },
    {
      "signature": {
        "name": "setOverlayScrollbar",
        "parameters": [
          {
            "type": {
              "name": "Boolean"
            },
            "name": "overlay"
          }
        ],
        "str": "setOverlayScrollbar(overlay)"
      },
      "platform": [
        "macOS",
        "linux"
      ],
      "description": "Set whether to use overlay scrolling.",
      "id": "setoverlayscrollbar-overlay"
    },
    {
      "signature": {
        "name": "setScrollbarPolicy",
        "parameters": [
          {
            "type": {
              "name": "Scroll::Policy",
              "id": "scroll_policy"
            },
            "name": "hpolicy",
            "description": "Policy for horizontal scrollbar."
          },
          {
            "type": {
              "name": "Scroll::Policy",
              "id": "scroll_policy"
            },
            "name": "vpolicy",
            "description": "Policy for vertical scrollbar."
          }
        ],
        "str": "setScrollbarPolicy(hpolicy, vpolicy)"
      },
      "description": "Set the policy for displaying horizontal and vertical scrollbars.\n",
      "id": "setscrollbarpolicy-hpolicy-vpolicy"
    },
    {
      "signature": {
        "returnType": {
          "name": "RectF",
          "id": "rectf"
        },
        "name": "getTextBounds",
        "parameters": [],
        "str": "getTextBounds()"
      },
      "description": "Return the text extend.",
      "id": "gettextbounds"
    }
  ],
  "events": [
    {
      "callback": {
        "name": "onTextChange",
        "parameters": [
          {
            "type": {
              "name": "TextEdit",
              "id": "textedit"
            },
            "name": "self"
          }
        ],
        "str": "onTextChange(self)"
      },
      "description": "Emitted when user has changed text.",
      "id": "ontextchange-self"
    }
  ],
  "delegates": [
    {
      "signature": {
        "returnType": {
          "name": "Boolean"
        },
        "name": "shouldInsertNewLine",
        "parameters": [
          {
            "type": {
              "name": "TextEdit",
              "id": "textedit"
            },
            "name": "self"
          }
        ],
        "str": "shouldInsertNewLine(self)"
      },
      "description": "Called when user presses `Return` to insert new line, should return\nwhether it is allowed.\n",
      "id": "shouldinsertnewline-self"
    }
  ],
  "module": "gui",
  "id": "textedit"
}