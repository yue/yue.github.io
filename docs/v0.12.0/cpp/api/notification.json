{
  "name": "Notification",
  "component": "gui",
  "header": "nativeui/notification.h",
  "type": "refcounted",
  "namespace": "nu",
  "description": "Send native notifications.",
  "detail": "The `Notification` API is responsible for sending notifications, for handling\nevents of notifications, the `<!type>NotificationCenter` API should be used.\n\nBefore sending notifications, you should set app's ID and name otherwise the\nnotifications may not be displayed.\n\n```cpp\nauto* app = nu::App::GetCurrent();\napp->SetName(\"MyApp\");\n#if defined(OS_LINUX) || defined(OS_WIN)\napp->SetID(\"org.yue.myapp\");\n#else\nif (app->GetID().empty())\n  LOG(ERROR) << \"Unable to send notifications due to app not being bundled\";\n#endif\n\n#if defined(OS_WIN)\n// Create start menu shortcut for testing.\napp->CreateStartMenuShortcut(nu::App::ShortcutOptions());\n#endif\n\nscoped_refptr<nu::Notification> notification = new nu::Notification;\nnotification->SetTitle(\"Title\");\nnotification->SetBody(\"Message\");\nnotification->SetInfo(\"first-notification\");\nnotification->Show();\n```\n\n```lua\ngui.app:setname(\"MyApp\")\nif (sys.platform ~= \"macos\")\n  gui.app:setid(\"org.yue.myapp\")\nelse if (gui.app:getid() == '')\n  print(\"Unable to send notifications due to app not being bundled\")\n\n-- Create start menu shortcut for testing.\nif (sys.platform == \"win32\")\n  gui.app:createstartmenushortcut{}\n\nlocal notification = gui.Notification.create()\nnotification:settitle(\"Title\")\nnotification:setbody(\"Message\")\nnotification:setinfo(\"first-notification\")\nnotification:show()\n```\n\n```js\ngui.app.setName(\"MyApp\")\nif (process.platform !== 'darwin')\n  gui.app.setID(\"org.yue.myapp\")\nelse if (gui.app.getID().length === 0)\n  console.error(\"Unable to send notifications due to app not being bundled\")\n\n// Create start menu shortcut for testing.\nif (process.platform === \"win32\")\n  gui.app.createStartMenuShortcut({})\n\nconst notification = gui.Notification.create()\nnotification.setTitle(\"Title\")\nnotification.setBody(\"Message\")\nnotification.setInfo(\"first-notification\")\nnotification.show()\n```\n\n## Platform requirements\n\nOn macOS, only bundled apps can send notifications. To check if the app is\nbundled, you can check whether `<!method>App::GetID()` returns a non-empty\nstring.\n\nOn Linux, `Notification` is implemented by sending DBus messages following the\n[Desktop Notifications Specification](https://developer.gnome.org/notification-spec/),\nthe desktop environment must has a desktop notifications service running to\nshow the notifications.\n\nOn Windows, to display the notifications the app must has an AppUserModelID,\nand a shortcut on the start menu. For testing purpose, you can use the\n`<!method>App::CreateStartMenuShortcut(options)` API to create a start menu\nshortcut file.\n\nAlso on Windows `Notification` uses toast notifications under the hood, and\ncurrently only Windows 10 and above are supported.\n",
  "methods": [
    {
      "signature": {
        "name": "Show",
        "parameters": [],
        "shortStr": "Show()",
        "str": "void Show()"
      },
      "description": "Display the notification.",
      "detail": "If the notification has already been displayed, calling this method again\nwill update the contents of the notification. If the notification has been\nclosed, calling this method will show the notification again.\n\nOn Windows due to platform limitation, only the title and body of the\nnotification can be updated after it has been displayed.\n",
      "id": "show"
    },
    {
      "signature": {
        "name": "Close",
        "parameters": [],
        "shortStr": "Close()",
        "str": "void Close()"
      },
      "description": "Close the notification.",
      "id": "close"
    },
    {
      "signature": {
        "name": "SetTitle",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "title"
          }
        ],
        "shortStr": "SetTitle(title)",
        "str": "void SetTitle(const std::string& title)"
      },
      "description": "Set the title of the notification.",
      "id": "settitle-title"
    },
    {
      "signature": {
        "name": "SetBody",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "body"
          }
        ],
        "shortStr": "SetBody(body)",
        "str": "void SetBody(const std::string& body)"
      },
      "description": "Set the body text of the notification.",
      "id": "setbody-body"
    },
    {
      "signature": {
        "name": "SetInfo",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "info"
          }
        ],
        "shortStr": "SetInfo(info)",
        "str": "void SetInfo(const std::string& info)"
      },
      "description": "Set the user info to be attached to the notification.",
      "detail": "When handling notification events with `<!type>NotificationCenter`, only\nthe user info will be passed to the event handler.\n",
      "id": "setinfo-info"
    },
    {
      "signature": {
        "returnType": {
          "name": "std::string"
        },
        "name": "GetInfo",
        "parameters": [],
        "shortStr": "GetInfo()",
        "str": "std::string GetInfo() const"
      },
      "description": "Return the attached user info.",
      "id": "getinfo"
    },
    {
      "signature": {
        "name": "SetActions",
        "parameters": [
          {
            "type": {
              "name": "const std::vector<Notification::Action>&"
            },
            "name": "actions",
            "description": "An array of `<!type>Notification::Action`."
          }
        ],
        "shortStr": "SetActions(actions)",
        "str": "void SetActions(const std::vector<Notification::Action>& actions)"
      },
      "description": "Set the buttons to be displayed in the notification.",
      "detail": "The `<!name>on_notification_action` event of `<!type>NotificationCenter`\nwill be emitted when user clicks one of the buttons.\n",
      "id": "setactions-actions"
    },
    {
      "signature": {
        "name": "SetSilent",
        "parameters": [
          {
            "type": {
              "name": "bool"
            },
            "name": "silent"
          }
        ],
        "shortStr": "SetSilent(silent)",
        "str": "void SetSilent(bool silent)"
      },
      "description": "Set whether to play sound when the notification is displayed.",
      "id": "setsilent-silent"
    },
    {
      "signature": {
        "name": "SetImage",
        "parameters": [
          {
            "type": {
              "name": "scoped_refptr<Image>",
              "id": "image"
            },
            "name": "image"
          }
        ],
        "shortStr": "SetImage(image)",
        "str": "void SetImage(scoped_refptr<Image> image)"
      },
      "description": "Set the image shown in the content of the notification.",
      "detail": "Different platforms may choose to put the image in different places, there\nis no guarentee on where the image is placed.\n",
      "id": "setimage-image"
    },
    {
      "signature": {
        "name": "SetImagePath",
        "parameters": [
          {
            "type": {
              "name": "const base::FilePath&"
            },
            "name": "path"
          }
        ],
        "shortStr": "SetImagePath(path)",
        "str": "void SetImagePath(const base::FilePath& path)"
      },
      "description": "Set the file path of the image shown in the content of the notification.\n",
      "detail": "This method is usually faster than reading a file from disk and passing\nits content to `<!name>SetImage`, so it is recommended to use this\nmethod over `<!name>SetImage` if the image is stored on disk.\n\nDifferent platforms may choose to put the image in different places, there\nis no guarentee on where the image is placed.\n",
      "id": "setimagepath-path"
    },
    {
      "signature": {
        "name": "SetImagePlacement",
        "parameters": [
          {
            "type": {
              "name": "absl::optional<std::wstring>",
              "nullable": true
            },
            "name": "placement"
          }
        ],
        "shortStr": "SetImagePlacement(placement)",
        "str": "void SetImagePlacement(absl::optional<std::wstring> placement)"
      },
      "platform": [
        "Windows"
      ],
      "description": "Set the `placement` attribute of the image.",
      "detail": "The most common used `placement`s are `\"appLogoOverride\"` and `\"hero\"`.\n",
      "id": "setimageplacement-placement"
    },
    {
      "signature": {
        "name": "SetHasReplyButton",
        "parameters": [
          {
            "type": {
              "name": "bool"
            },
            "name": "has"
          }
        ],
        "shortStr": "SetHasReplyButton(has)",
        "str": "void SetHasReplyButton(bool has)"
      },
      "platform": [
        "macOS",
        "Windows"
      ],
      "description": "Set whether to display an input field and a reply button in the\nnotification.\n",
      "detail": "The `<!name>on_notification_reply` event of `<!type>NotificationCenter`\nwill be emitted when user sends a reply in the notification.\n",
      "id": "sethasreplybutton-has"
    },
    {
      "signature": {
        "name": "SetResponsePlaceholder",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "placeholder"
          }
        ],
        "shortStr": "SetResponsePlaceholder(placeholder)",
        "str": "void SetResponsePlaceholder(const std::string& placeholder)"
      },
      "platform": [
        "macOS",
        "Windows"
      ],
      "description": "The the placeholder of the input field.",
      "id": "setresponseplaceholder-placeholder"
    },
    {
      "signature": {
        "name": "SetIdentifier",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "identifier"
          }
        ],
        "shortStr": "SetIdentifier(identifier)",
        "str": "void SetIdentifier(const std::string& identifier)"
      },
      "platform": [
        "macOS",
        "Windows"
      ],
      "description": "Set an unique `identifier` that can identifies a notification.",
      "detail": "When there is already a displayed notification with the same identifier,\nshowing this notification will update its contents.\n\nOn Windows due to platform limitation, only the title and body of the\nnotification can be updated after it has been displayed.\n\nNote that there is no equivalent API on Linux, to update an existing\nnotification's contents you have to keep the instance of the notification\nand call its `<!name>Show` method.\n",
      "id": "setidentifier-identifier"
    },
    {
      "signature": {
        "returnType": {
          "name": "std::string"
        },
        "name": "GetIdentifier",
        "parameters": [],
        "shortStr": "GetIdentifier()",
        "str": "std::string GetIdentifier() const"
      },
      "platform": [
        "macOS",
        "Windows"
      ],
      "description": "Return the unique identifier of the notification.",
      "id": "getidentifier"
    },
    {
      "signature": {
        "name": "SetXML",
        "parameters": [
          {
            "type": {
              "name": "absl::optional<std::wstring>",
              "nullable": true
            },
            "name": "xml"
          }
        ],
        "shortStr": "SetXML(xml)",
        "str": "void SetXML(absl::optional<std::wstring> xml)"
      },
      "platform": [
        "Windows"
      ],
      "description": "Set custom XML of the toast notification.",
      "detail": "On Windows the notification can have rich contents and the Notification\nAPIs do not cover all the possible features. In case you want to show\nsome rich contents, you can use this API to set raw XML of the\nnotification.\n\nYou can find documentation on the XML schema and tools to generate XML\nat [here](https://docs.microsoft.com/en-us/windows/apps/design/shell/tiles-and-notifications/adaptive-interactive-toasts?tabs=xml).\n",
      "id": "setxml-xml"
    },
    {
      "signature": {
        "returnType": {
          "name": "std::wstring"
        },
        "name": "GetXML",
        "parameters": [],
        "shortStr": "GetXML()",
        "str": "std::wstring GetXML() const"
      },
      "platform": [
        "Windows"
      ],
      "description": "Return the XML representation of the toast notification.",
      "id": "getxml"
    }
  ],
  "id": "notification"
}