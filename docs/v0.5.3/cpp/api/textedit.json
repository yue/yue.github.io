{
  "name": "TextEdit",
  "component": "gui",
  "header": "nativeui/text_edit.h",
  "type": "refcounted",
  "namespace": "nu",
  "inherit": {
    "name": "View",
    "id": "view"
  },
  "description": "Plain text input view.",
  "constructors": [
    {
      "signature": {
        "name": "TextEdit",
        "parameters": [],
        "str": "TextEdit()"
      },
      "description": "Create a new `TextEdit`.",
      "id": "textedit"
    }
  ],
  "class_properties": [
    {
      "description": "The class name of this view.",
      "id": "kclassname",
      "type": {
        "name": "const char*"
      },
      "name": "kClassName"
    }
  ],
  "methods": [
    {
      "signature": {
        "name": "SetText",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "text"
          }
        ],
        "str": "void SetText(const std::string& text)"
      },
      "description": "Change the text in the view.",
      "id": "settext-text"
    },
    {
      "signature": {
        "returnType": {
          "name": "std::string"
        },
        "name": "GetText",
        "parameters": [],
        "str": "std::string GetText() const"
      },
      "description": "Return currently displayed text.",
      "id": "gettext"
    },
    {
      "signature": {
        "name": "Undo",
        "parameters": [],
        "str": "void Undo()"
      },
      "description": "Undo the last edit operation in the undo queue.",
      "id": "undo"
    },
    {
      "signature": {
        "name": "CanUndo",
        "parameters": [],
        "str": "void CanUndo() const"
      },
      "description": "Return whether there are any actions in undo queue.",
      "id": "canundo"
    },
    {
      "signature": {
        "name": "Redo",
        "parameters": [],
        "str": "void Redo()"
      },
      "description": "Redo the next action in the redo queue",
      "id": "redo"
    },
    {
      "signature": {
        "name": "CanRedo",
        "parameters": [],
        "str": "void CanRedo() const"
      },
      "description": "Return whether there are any actions in redo queue.",
      "id": "canredo"
    },
    {
      "signature": {
        "name": "Cut",
        "parameters": [],
        "str": "void Cut()"
      },
      "description": "Delete (cut) the current selection, if any, copy the deleted text to the\nclipboard.\n",
      "id": "cut"
    },
    {
      "signature": {
        "name": "Copy",
        "parameters": [],
        "str": "void Copy()"
      },
      "description": "Copy current selection to clipboard.",
      "id": "copy"
    },
    {
      "signature": {
        "name": "Paste",
        "parameters": [],
        "str": "void Paste()"
      },
      "description": "Copy the current content of the clipboard to current caret position.\n",
      "id": "paste"
    },
    {
      "signature": {
        "name": "SelectAll",
        "parameters": [],
        "str": "void SelectAll()"
      },
      "description": "Select all text.",
      "id": "selectall"
    },
    {
      "signature": {
        "returnType": {
          "name": "std::tuple<int, int>",
          "template": "std::tuple",
          "args": [
            {
              "name": "int"
            },
            {
              "name": "int"
            }
          ]
        },
        "name": "GetSelectionRange",
        "parameters": [],
        "str": "std::tuple<int, int> GetSelectionRange() const"
      },
      "description": "Return the start position and end position of current selection.\n\nIf nothing is selected, the cursor position will be returned as both values, ie. (0, 0).\n",
      "id": "getselectionrange"
    },
    {
      "signature": {
        "name": "SelectRange",
        "parameters": [
          {
            "type": {
              "name": "int"
            },
            "name": "start"
          },
          {
            "type": {
              "name": "int"
            },
            "name": "end"
          }
        ],
        "str": "void SelectRange(int start, int end)"
      },
      "description": "Select text between `start` and `end` positions.",
      "id": "selectrange-start-end"
    },
    {
      "signature": {
        "returnType": {
          "name": "std::string"
        },
        "name": "GetTextInRange",
        "parameters": [
          {
            "type": {
              "name": "int"
            },
            "name": "start"
          },
          {
            "type": {
              "name": "int"
            },
            "name": "end"
          }
        ],
        "str": "std::string GetTextInRange(int start, int end) const"
      },
      "description": "Return the text between `start` and `end` positions.",
      "id": "gettextinrange-start-end"
    },
    {
      "signature": {
        "name": "InsertText",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "text"
          }
        ],
        "str": "void InsertText(const std::string& text)"
      },
      "description": "Insert `text` at current caret position.",
      "id": "inserttext-text"
    },
    {
      "signature": {
        "name": "InsertTextAt",
        "parameters": [
          {
            "type": {
              "name": "const std::string&"
            },
            "name": "text"
          },
          {
            "type": {
              "name": "int"
            },
            "name": "position"
          }
        ],
        "str": "void InsertTextAt(const std::string& text, int position)"
      },
      "description": "Insert `text` at the `position`.",
      "id": "inserttextat-text-position"
    },
    {
      "signature": {
        "name": "Delete",
        "parameters": [],
        "str": "void Delete()"
      },
      "description": "Delete text of current selection.",
      "id": "delete"
    },
    {
      "signature": {
        "name": "DeleteRange",
        "parameters": [
          {
            "type": {
              "name": "int"
            },
            "name": "start"
          },
          {
            "type": {
              "name": "int"
            },
            "name": "end"
          }
        ],
        "str": "void DeleteRange(int start, int end)"
      },
      "description": "Delete text between `start` and `end` positions.",
      "id": "deleterange-start-end"
    },
    {
      "signature": {
        "name": "SetOverlayScrollbar",
        "parameters": [
          {
            "type": {
              "name": "bool"
            },
            "name": "overlay"
          }
        ],
        "str": "void SetOverlayScrollbar(bool overlay)"
      },
      "platform": [
        "macOS",
        "linux"
      ],
      "description": "Set whether to use overlay scrolling.",
      "id": "setoverlayscrollbar-overlay"
    },
    {
      "signature": {
        "name": "SetScrollbarPolicy",
        "parameters": [
          {
            "type": {
              "name": "Scroll::Policy",
              "id": "scroll_policy"
            },
            "name": "hpolicy",
            "description": "Policy for horizontal scrollbar."
          },
          {
            "type": {
              "name": "Scroll::Policy",
              "id": "scroll_policy"
            },
            "name": "vpolicy",
            "description": "Policy for vertical scrollbar."
          }
        ],
        "str": "void SetScrollbarPolicy(Scroll::Policy hpolicy, Scroll::Policy vpolicy)"
      },
      "description": "Set the policy for displaying horizontal and vertical scrollbars.\n",
      "id": "setscrollbarpolicy-hpolicy-vpolicy"
    },
    {
      "signature": {
        "returnType": {
          "name": "RectF",
          "id": "rectf"
        },
        "name": "GetTextBounds",
        "parameters": [],
        "str": "RectF GetTextBounds() const"
      },
      "description": "Return the text extend.",
      "id": "gettextbounds"
    }
  ],
  "events": [
    {
      "callback": {
        "name": "on_text_change",
        "parameters": [
          {
            "type": {
              "name": "TextEdit*",
              "id": "textedit"
            },
            "name": "self"
          }
        ],
        "str": "void on_text_change(TextEdit* self)"
      },
      "description": "Emitted when user has changed text.",
      "id": "ontextchange-self"
    }
  ],
  "delegates": [
    {
      "signature": {
        "returnType": {
          "name": "bool"
        },
        "name": "should_insert_new_line",
        "parameters": [
          {
            "type": {
              "name": "TextEdit*",
              "id": "textedit"
            },
            "name": "self"
          }
        ],
        "str": "bool should_insert_new_line(TextEdit* self)"
      },
      "description": "Called when user presses `Return` to insert new line, should return\nwhether it is allowed.\n",
      "id": "shouldinsertnewline-self"
    }
  ],
  "id": "textedit"
}