{
  "name": "Image",
  "component": "gui",
  "header": "nativeui/gfx/image.h",
  "type": "Class",
  "namespace": "nu",
  "description": "Native image.",
  "detail": "## High DPI Image\n\nBy appending `@{scaleFactor}x` to the image's base filename, you can mark\nthe image as a high DPI image. For example an image file with filename of\n`icon@2x.png` will have scale factor of 2.\n\n## Template Image\n\nOn macOS you can mark an image as template image by putting `Template` to\nits base filename, for example `iconTemplate.png` and `iconTemplate@2x.png`.\n\nTemplate images should consist of only black and clear colors, and macOS will\nmix with other content to create best appearance. This is useful for tray\nicons and menu item icons that automatically adjust to light and dark themes.\n",
  "class_methods": [
    {
      "signature": {
        "returnType": {
          "name": "Image",
          "id": "image"
        },
        "name": "createempty",
        "parameters": [],
        "shortStr": "createempty()",
        "str": "createempty()"
      },
      "description": "Create an empty image.",
      "id": "createempty"
    },
    {
      "signature": {
        "returnType": {
          "name": "Image",
          "id": "image"
        },
        "name": "createfrompath",
        "parameters": [
          {
            "type": {
              "name": "string"
            },
            "name": "path"
          }
        ],
        "shortStr": "createfrompath(path)",
        "str": "createfrompath(path)"
      },
      "description": "Create an image by reading from `path`.",
      "id": "createfrompath-path"
    },
    {
      "signature": {
        "returnType": {
          "name": "Image",
          "id": "image"
        },
        "name": "createfrombuffer",
        "parameters": [
          {
            "type": {
              "name": "string"
            },
            "name": "buffer"
          },
          {
            "type": {
              "name": "number"
            },
            "name": "scalefactor"
          }
        ],
        "shortStr": "createfrombuffer(buffer, scalefactor)",
        "str": "createfrombuffer(buffer, scalefactor)"
      },
      "description": "Create an image from `buffer` in memory, with `scale_factor`.\n",
      "id": "createfrombuffer-buffer-scalefactor"
    }
  ],
  "methods": [
    {
      "signature": {
        "returnType": {
          "name": "boolean"
        },
        "name": "isempty",
        "parameters": [],
        "shortStr": "isempty()",
        "str": "isempty()"
      },
      "description": "Return whether the image has any data.",
      "id": "isempty"
    },
    {
      "signature": {
        "name": "settemplate",
        "parameters": [
          {
            "type": {
              "name": "boolean"
            },
            "name": "is"
          }
        ],
        "shortStr": "settemplate(is)",
        "str": "settemplate(is)"
      },
      "description": "Set whether the image is a template image.",
      "id": "settemplate-is"
    },
    {
      "signature": {
        "returnType": {
          "name": "boolean"
        },
        "name": "istemplate",
        "parameters": [],
        "shortStr": "istemplate()",
        "str": "istemplate()"
      },
      "description": "Return whether the image is a template image.",
      "id": "istemplate"
    },
    {
      "signature": {
        "returnType": {
          "name": "SizeF",
          "id": "sizef"
        },
        "name": "getsize",
        "parameters": [],
        "shortStr": "getsize()",
        "str": "getsize()"
      },
      "description": "Return image's size in DIP.",
      "id": "getsize"
    },
    {
      "signature": {
        "returnType": {
          "name": "number"
        },
        "name": "getscalefactor",
        "parameters": [],
        "shortStr": "getscalefactor()",
        "str": "getscalefactor()"
      },
      "description": "Return image's scale factor.",
      "id": "getscalefactor"
    },
    {
      "signature": {
        "returnType": {
          "name": "Image",
          "id": "image"
        },
        "name": "tint",
        "parameters": [
          {
            "type": {
              "name": "Color",
              "id": "color"
            },
            "name": "color"
          }
        ],
        "shortStr": "tint(color)",
        "str": "tint(color)"
      },
      "description": "Return a new image that has tint color applied.",
      "detail": "On Windows the tint color is applied by using color matrix, while other\nplatforms use `<!enum class>SourceAtop` blend mode. So the result image\nmight very likely look different on Windows.\n",
      "id": "tint-color"
    },
    {
      "signature": {
        "returnType": {
          "name": "Image",
          "id": "image"
        },
        "name": "resize",
        "parameters": [
          {
            "type": {
              "name": "SizeF",
              "id": "sizef"
            },
            "name": "newsize"
          },
          {
            "type": {
              "name": "number"
            },
            "name": "scalefactor"
          }
        ],
        "shortStr": "resize(newsize, scalefactor)",
        "str": "resize(newsize, scalefactor)"
      },
      "description": "Return a new image resized to `new_size` with `scale_factor`.",
      "id": "resize-newsize-scalefactor"
    },
    {
      "signature": {
        "returnType": {
          "name": "string"
        },
        "name": "topng",
        "parameters": [],
        "shortStr": "topng()",
        "str": "topng()"
      },
      "description": "Return a buffer containing the image's PNG encoded data.",
      "id": "topng"
    },
    {
      "signature": {
        "returnType": {
          "name": "string"
        },
        "name": "tojpeg",
        "parameters": [
          {
            "type": {
              "name": "integer"
            },
            "name": "quality",
            "description": "Between 1-100."
          }
        ],
        "shortStr": "tojpeg(quality)",
        "str": "tojpeg(quality)"
      },
      "description": "Return a buffer containing the image's JPEG encoded data.",
      "id": "tojpeg-quality"
    }
  ],
  "module": "yue.gui",
  "id": "image"
}